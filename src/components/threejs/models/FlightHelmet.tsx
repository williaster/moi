/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import React, { useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader';
import getStaticUrl from '../../../utils/getStaticUrl';

type GLTFResult = GLTF & {
  nodes: {
    Hose_low: THREE.Mesh;
    RubberWood_low: THREE.Mesh;
    GlassPlastic_low: THREE.Mesh;
    MetalParts_low: THREE.Mesh;
    LeatherParts_low: THREE.Mesh;
    Lenses_low: THREE.Mesh;
  };
  materials: {
    HoseMat: THREE.MeshStandardMaterial;
    RubberWoodMat: THREE.MeshStandardMaterial;
    GlassPlasticMat: THREE.MeshStandardMaterial;
    MetalPartsMat: THREE.MeshStandardMaterial;
    LeatherPartsMat: THREE.MeshStandardMaterial;
    LensesMat: THREE.MeshStandardMaterial;
  };
};

const url = getStaticUrl('/static/models/FlightHelmet/glTF/FlightHelmet.gltf');

export default function FlightHelmet(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF(url) as GLTFResult;
  return (
    <group ref={group} {...props} dispose={null}>
      <mesh geometry={nodes.Hose_low.geometry} material={materials.HoseMat} />
      <mesh geometry={nodes.RubberWood_low.geometry} material={materials.RubberWoodMat} />
      <mesh geometry={nodes.GlassPlastic_low.geometry} material={materials.GlassPlasticMat} />
      <mesh geometry={nodes.MetalParts_low.geometry} material={materials.MetalPartsMat} />
      <mesh geometry={nodes.LeatherParts_low.geometry} material={materials.LeatherPartsMat} />
      <mesh geometry={nodes.Lenses_low.geometry} material={materials.LensesMat} />
    </group>
  );
}

useGLTF.preload(url);
