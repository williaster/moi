/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import React, { useMemo, useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader';
import getStaticUrl from '../../../utils/getStaticUrl';
import SplitWireframeMesh, { SplitWireframeProps } from '../SplitWireframeMesh';
import { useScroll } from '../ScrollControls';
import { useFrame } from '@react-three/fiber';

type GLTFResult = GLTF & {
  nodes: {
    curly_fry_export: THREE.Mesh;
  };
  materials: {};
};

const url = getStaticUrl('/static/models/potatoes/curly.gltf');

export default function Curly({
  stroke,
  fill,
  background,
  ...props
}: JSX.IntrinsicElements['group'] & Omit<SplitWireframeProps, 'geometry'>) {
  const { nodes } = (useGLTF(url) as unknown) as GLTFResult;
  const ref = useRef<THREE.Mesh>();
  const scroll = useScroll();
  useFrame(() => {
    const r = scroll.range(1 / 4 - 0.3, 1 / 4 + 0.3);
    ref.current.scale.setScalar(1 + 5 * Math.sin(r * Math.PI) * scroll.offset);
  });
  return (
    <group {...props}>
      <SplitWireframeMesh
        ref={ref}
        stroke={stroke}
        fill={fill}
        background={background}
        geometry={nodes.curly_fry_export.geometry}
      />
    </group>
  );
}

useGLTF.preload(url);
